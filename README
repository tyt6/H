-*- encoding: utf-8-unix -*-

Programming Language H.

LICENSES: GPL v3

Haskell like language with eager evaluations in IO().
I'm not good at English sorry.

日本語
  haskell のIO()内をCみたいにeagerに評価して（IO関数の中身を組み換えます）
  
    import GHC.IOArray
    
    io1:: Ix i => IOArray i e -> i -> IOArray i e -> i -> IO Io2out
    io1 arr ix arr2 ix2= io2( ioarr o [ix], ioarr o [ix] <- ioarr2 o [ix2]);
    
  みたい(未定)に書けるようにしたい。(他の言語も混ざているかもしれません)
  (インストール中に書いてるので良い例が思いつかない。Haskellにも慣れていない。)
  
  上記の例は次のように組み換えます。(コンパイルに-XBangPatterns加えます。)
    import GHC.IOArray
  
    io1:: Ix i => IOArray i e -> i -> IOArray i e -> i -> IO Io2out
    io1 arr ix arr2 ix2 = do
      ! _uniquevar1_ <- readIOArray ioarr ix
      ! _uniquevar2_ <- readIOArray ioarr2 ix2
      writeIOArray ioarr ix _uniquevar2_
      ! _uniquevar3_ <- io2 _uniquevar1_ _uniquevar2_
      return _uniquevar3_

Install
  1. Build GHC from source file. http://hackage.haskell.org/trac/ghc/wiki/Building

  2. Build and install
  make
  make check
  make install

気になる事
  ・eager-haskellが気になります。cleanの正格性の注釈いれた感じならいいんですが。

TODOというより将来
 まずは リリース
 特殊構文用の型推論で明示的に型が無くても組み換えする。
 BLASやLAPACKに対応。

実装上の話
 どうせLazyだしreverse無しが良さそう。
